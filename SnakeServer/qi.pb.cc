// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zhaqijie/qi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RoomUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRoomAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoomAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareGameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareGameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStartAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStartAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOverAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOverAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PROTOCOL_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_zhaqijie_2fqi_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_zhaqijie_2fqi_2eproto() {
  protobuf_AddDesc_zhaqijie_2fqi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zhaqijie/qi.proto");
  GOOGLE_CHECK(file != NULL);
  RoomUser_descriptor_ = file->message_type(0);
  static const int RoomUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUser, state_),
  };
  RoomUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomUser_descriptor_,
      RoomUser::internal_default_instance(),
      RoomUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUser, _has_bits_),
      -1,
      -1,
      sizeof(RoomUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUser, _internal_metadata_));
  LoginReq_descriptor_ = file->message_type(1);
  static const int LoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, name_),
  };
  LoginReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginReq_descriptor_,
      LoginReq::internal_default_instance(),
      LoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_),
      -1,
      -1,
      sizeof(LoginReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _internal_metadata_));
  LoginAck_descriptor_ = file->message_type(2);
  static const int LoginAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, id_),
  };
  LoginAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginAck_descriptor_,
      LoginAck::internal_default_instance(),
      LoginAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, _has_bits_),
      -1,
      -1,
      sizeof(LoginAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, _internal_metadata_));
  Room_descriptor_ = file->message_type(3);
  static const int Room_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, roomname_),
  };
  Room_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Room_descriptor_,
      Room::internal_default_instance(),
      Room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, _has_bits_),
      -1,
      -1,
      sizeof(Room),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, _internal_metadata_));
  GetRoomReq_descriptor_ = file->message_type(4);
  static const int GetRoomReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomReq, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomReq, userid_),
  };
  GetRoomReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRoomReq_descriptor_,
      GetRoomReq::internal_default_instance(),
      GetRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomReq, _has_bits_),
      -1,
      -1,
      sizeof(GetRoomReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomReq, _internal_metadata_));
  GetRoomAck_descriptor_ = file->message_type(5);
  static const int GetRoomAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomAck, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomAck, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomAck, rooms_),
  };
  GetRoomAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRoomAck_descriptor_,
      GetRoomAck::internal_default_instance(),
      GetRoomAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomAck, _has_bits_),
      -1,
      -1,
      sizeof(GetRoomAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomAck, _internal_metadata_));
  EnterRoomReq_descriptor_ = file->message_type(6);
  static const int EnterRoomReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, roomid_),
  };
  EnterRoomReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnterRoomReq_descriptor_,
      EnterRoomReq::internal_default_instance(),
      EnterRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, _has_bits_),
      -1,
      -1,
      sizeof(EnterRoomReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, _internal_metadata_));
  EnterRoomAck_descriptor_ = file->message_type(7);
  static const int EnterRoomAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomAck, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomAck, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomAck, users_),
  };
  EnterRoomAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnterRoomAck_descriptor_,
      EnterRoomAck::internal_default_instance(),
      EnterRoomAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomAck, _has_bits_),
      -1,
      -1,
      sizeof(EnterRoomAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomAck, _internal_metadata_));
  PrepareGameReq_descriptor_ = file->message_type(8);
  static const int PrepareGameReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGameReq, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGameReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGameReq, roomid_),
  };
  PrepareGameReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrepareGameReq_descriptor_,
      PrepareGameReq::internal_default_instance(),
      PrepareGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGameReq, _has_bits_),
      -1,
      -1,
      sizeof(PrepareGameReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGameReq, _internal_metadata_));
  PrepareGameAck_descriptor_ = file->message_type(9);
  static const int PrepareGameAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGameAck, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGameAck, ret_),
  };
  PrepareGameAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrepareGameAck_descriptor_,
      PrepareGameAck::internal_default_instance(),
      PrepareGameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGameAck, _has_bits_),
      -1,
      -1,
      sizeof(PrepareGameAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGameAck, _internal_metadata_));
  ChessReq_descriptor_ = file->message_type(10);
  static const int ChessReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessReq, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessReq, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessReq, y_),
  };
  ChessReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChessReq_descriptor_,
      ChessReq::internal_default_instance(),
      ChessReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessReq, _has_bits_),
      -1,
      -1,
      sizeof(ChessReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessReq, _internal_metadata_));
  ChessAck_descriptor_ = file->message_type(11);
  static const int ChessAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessAck, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessAck, ret_),
  };
  ChessAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChessAck_descriptor_,
      ChessAck::internal_default_instance(),
      ChessAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessAck, _has_bits_),
      -1,
      -1,
      sizeof(ChessAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessAck, _internal_metadata_));
  GameStartAck_descriptor_ = file->message_type(12);
  static const int GameStartAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartAck, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartAck, userid_),
  };
  GameStartAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameStartAck_descriptor_,
      GameStartAck::internal_default_instance(),
      GameStartAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartAck, _has_bits_),
      -1,
      -1,
      sizeof(GameStartAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartAck, _internal_metadata_));
  GameOverAck_descriptor_ = file->message_type(13);
  static const int GameOverAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverAck, proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverAck, userid_),
  };
  GameOverAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameOverAck_descriptor_,
      GameOverAck::internal_default_instance(),
      GameOverAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverAck, _has_bits_),
      -1,
      -1,
      sizeof(GameOverAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverAck, _internal_metadata_));
  Result_descriptor_ = file->enum_type(0);
  PROTOCOL_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zhaqijie_2fqi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomUser_descriptor_, RoomUser::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginReq_descriptor_, LoginReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginAck_descriptor_, LoginAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Room_descriptor_, Room::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRoomReq_descriptor_, GetRoomReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRoomAck_descriptor_, GetRoomAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnterRoomReq_descriptor_, EnterRoomReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnterRoomAck_descriptor_, EnterRoomAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrepareGameReq_descriptor_, PrepareGameReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrepareGameAck_descriptor_, PrepareGameAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChessReq_descriptor_, ChessReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChessAck_descriptor_, ChessAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameStartAck_descriptor_, GameStartAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameOverAck_descriptor_, GameOverAck::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zhaqijie_2fqi_2eproto() {
  RoomUser_default_instance_.Shutdown();
  delete RoomUser_reflection_;
  LoginReq_default_instance_.Shutdown();
  delete LoginReq_reflection_;
  LoginAck_default_instance_.Shutdown();
  delete LoginAck_reflection_;
  Room_default_instance_.Shutdown();
  delete Room_reflection_;
  GetRoomReq_default_instance_.Shutdown();
  delete GetRoomReq_reflection_;
  GetRoomAck_default_instance_.Shutdown();
  delete GetRoomAck_reflection_;
  EnterRoomReq_default_instance_.Shutdown();
  delete EnterRoomReq_reflection_;
  EnterRoomAck_default_instance_.Shutdown();
  delete EnterRoomAck_reflection_;
  PrepareGameReq_default_instance_.Shutdown();
  delete PrepareGameReq_reflection_;
  PrepareGameAck_default_instance_.Shutdown();
  delete PrepareGameAck_reflection_;
  ChessReq_default_instance_.Shutdown();
  delete ChessReq_reflection_;
  ChessAck_default_instance_.Shutdown();
  delete ChessAck_reflection_;
  GameStartAck_default_instance_.Shutdown();
  delete GameStartAck_reflection_;
  GameOverAck_default_instance_.Shutdown();
  delete GameOverAck_reflection_;
}

void protobuf_InitDefaults_zhaqijie_2fqi_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  RoomUser_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LoginReq_default_instance_.DefaultConstruct();
  LoginAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Room_default_instance_.DefaultConstruct();
  GetRoomReq_default_instance_.DefaultConstruct();
  GetRoomAck_default_instance_.DefaultConstruct();
  EnterRoomReq_default_instance_.DefaultConstruct();
  EnterRoomAck_default_instance_.DefaultConstruct();
  PrepareGameReq_default_instance_.DefaultConstruct();
  PrepareGameAck_default_instance_.DefaultConstruct();
  ChessReq_default_instance_.DefaultConstruct();
  ChessAck_default_instance_.DefaultConstruct();
  GameStartAck_default_instance_.DefaultConstruct();
  GameOverAck_default_instance_.DefaultConstruct();
  RoomUser_default_instance_.get_mutable()->InitAsDefaultInstance();
  LoginReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  LoginAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  Room_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetRoomReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetRoomAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  EnterRoomReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  EnterRoomAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  PrepareGameReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  PrepareGameAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  ChessReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  ChessAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameStartAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameOverAck_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_zhaqijie_2fqi_2eproto_once_);
void protobuf_InitDefaults_zhaqijie_2fqi_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_zhaqijie_2fqi_2eproto_once_,
                 &protobuf_InitDefaults_zhaqijie_2fqi_2eproto_impl);
}
void protobuf_AddDesc_zhaqijie_2fqi_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021zhaqijie/qi.proto\"\'\n\010RoomUser\022\014\n\004name\030"
    "\001 \002(\t\022\r\n\005state\030\002 \002(\005\".\n\010LoginReq\022\024\n\005proI"
    "D\030\001 \001(\005:\00510000\022\014\n\004name\030\002 \002(\t\"B\n\010LoginAck"
    "\022\024\n\005proID\030\001 \001(\005:\00510001\022\024\n\003ret\030\002 \002(\0162\007.Re"
    "sult\022\n\n\002id\030\003 \002(\005\"D\n\004Room\022\016\n\006roomID\030\001 \002(\005"
    "\022\r\n\005count\030\002 \002(\005\022\013\n\003max\030\003 \002(\005\022\020\n\010roomName"
    "\030\004 \002(\t\"2\n\nGetRoomReq\022\024\n\005proID\030\001 \001(\005:\005100"
    "02\022\016\n\006userID\030\002 \002(\005\"N\n\nGetRoomAck\022\024\n\005proI"
    "D\030\001 \001(\005:\00510003\022\024\n\003ret\030\002 \002(\0162\007.Result\022\024\n\005"
    "rooms\030\003 \003(\0132\005.Room\"D\n\014EnterRoomReq\022\024\n\005pr"
    "oID\030\001 \001(\005:\00510004\022\016\n\006userID\030\002 \002(\005\022\016\n\006room"
    "ID\030\003 \002(\005\"T\n\014EnterRoomAck\022\024\n\005proID\030\001 \001(\005:"
    "\00510005\022\024\n\003ret\030\002 \002(\0162\007.Result\022\030\n\005users\030\003 "
    "\003(\0132\t.RoomUser\"F\n\016PrepareGameReq\022\024\n\005proI"
    "D\030\001 \001(\005:\00510006\022\016\n\006userID\030\002 \002(\005\022\016\n\006roomID"
    "\030\003 \002(\005\"<\n\016PrepareGameAck\022\024\n\005proID\030\001 \001(\005:"
    "\00510007\022\024\n\003ret\030\002 \002(\0162\007.Result\"F\n\010ChessReq"
    "\022\024\n\005proID\030\001 \001(\005:\00510008\022\016\n\006userID\030\002 \002(\005\022\t"
    "\n\001x\030\003 \002(\005\022\t\n\001y\030\004 \002(\005\"6\n\010ChessAck\022\024\n\005proI"
    "D\030\001 \001(\005:\00510009\022\024\n\003ret\030\002 \002(\0162\007.Result\"4\n\014"
    "GameStartAck\022\024\n\005proID\030\001 \001(\005:\00510010\022\016\n\006us"
    "erID\030\002 \002(\005\"3\n\013GameOverAck\022\024\n\005proID\030\001 \001(\005"
    ":\00510011\022\016\n\006userID\030\002 \002(\005* \n\006Result\022\013\n\007Suc"
    "cess\020\001\022\t\n\005Error\020\002*\365\001\n\010PROTOCOL\022\017\n\n__Logi"
    "nReq\020\220N\022\017\n\n__LoginAck\020\221N\022\021\n\014__GetRoomReq"
    "\020\222N\022\021\n\014__GetRoomAck\020\223N\022\023\n\016__EnterRoomReq"
    "\020\224N\022\023\n\016__EnterRoomAck\020\225N\022\025\n\020__PrepareGam"
    "eReq\020\226N\022\025\n\020__PrepareGameAck\020\227N\022\017\n\n__Ches"
    "sReq\020\230N\022\017\n\n__ChessAck\020\231N\022\023\n\016__GameStartA"
    "ck\020\232N\022\022\n\r__GameOverAck\020\233N", 1185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zhaqijie/qi.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zhaqijie_2fqi_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_zhaqijie_2fqi_2eproto_once_);
void protobuf_AddDesc_zhaqijie_2fqi_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_zhaqijie_2fqi_2eproto_once_,
                 &protobuf_AddDesc_zhaqijie_2fqi_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zhaqijie_2fqi_2eproto {
  StaticDescriptorInitializer_zhaqijie_2fqi_2eproto() {
    protobuf_AddDesc_zhaqijie_2fqi_2eproto();
  }
} static_descriptor_initializer_zhaqijie_2fqi_2eproto_;
const ::google::protobuf::EnumDescriptor* Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}
bool Result_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PROTOCOL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PROTOCOL_descriptor_;
}
bool PROTOCOL_IsValid(int value) {
  switch (value) {
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomUser::kNameFieldNumber;
const int RoomUser::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomUser::RoomUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomUser)
}

void RoomUser::InitAsDefaultInstance() {
}

RoomUser::RoomUser(const RoomUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoomUser)
}

void RoomUser::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

RoomUser::~RoomUser() {
  // @@protoc_insertion_point(destructor:RoomUser)
  SharedDtor();
}

void RoomUser::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoomUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomUser_descriptor_;
}

const RoomUser& RoomUser::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RoomUser> RoomUser_default_instance_;

RoomUser* RoomUser::New(::google::protobuf::Arena* arena) const {
  RoomUser* n = new RoomUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomUser::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomUser)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    state_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoomUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoomUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RoomUser.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoomUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoomUser)
  return false;
#undef DO_
}

void RoomUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoomUser)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RoomUser.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoomUser)
}

::google::protobuf::uint8* RoomUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RoomUser)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RoomUser.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomUser)
  return target;
}

size_t RoomUser::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoomUser)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_state()) {
    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  return total_size;
}
size_t RoomUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomUser)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomUser)
    UnsafeMergeFrom(*source);
  }
}

void RoomUser::MergeFrom(const RoomUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomUser)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RoomUser::UnsafeMergeFrom(const RoomUser& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RoomUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomUser::CopyFrom(const RoomUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomUser)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RoomUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoomUser::Swap(RoomUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomUser::InternalSwap(RoomUser* other) {
  name_.Swap(&other->name_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomUser_descriptor_;
  metadata.reflection = RoomUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomUser

// required string name = 1;
bool RoomUser::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomUser::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomUser::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& RoomUser::name() const {
  // @@protoc_insertion_point(field_get:RoomUser.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoomUser::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RoomUser.name)
}
void RoomUser::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoomUser.name)
}
void RoomUser::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoomUser.name)
}
::std::string* RoomUser::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:RoomUser.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoomUser::release_name() {
  // @@protoc_insertion_point(field_release:RoomUser.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoomUser::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:RoomUser.name)
}

// required int32 state = 2;
bool RoomUser::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomUser::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomUser::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomUser::clear_state() {
  state_ = 0;
  clear_has_state();
}
::google::protobuf::int32 RoomUser::state() const {
  // @@protoc_insertion_point(field_get:RoomUser.state)
  return state_;
}
void RoomUser::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:RoomUser.state)
}

inline const RoomUser* RoomUser::internal_default_instance() {
  return &RoomUser_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReq::kProIDFieldNumber;
const int LoginReq::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReq::LoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginReq)
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginReq)
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proid_ = 10000;
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_descriptor_;
}

const LoginReq& LoginReq::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoginReq> LoginReq_default_instance_;

LoginReq* LoginReq::New(::google::protobuf::Arena* arena) const {
  LoginReq* n = new LoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginReq)
  if (_has_bits_[0 / 32] & 3u) {
    proid_ = 10000;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proID = 1 [default = 10000];
      case 1: {
        if (tag == 8) {
          set_has_proid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LoginReq.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginReq)
  return false;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginReq)
  // optional int32 proID = 1 [default = 10000];
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginReq.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginReq)
}

::google::protobuf::uint8* LoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LoginReq)
  // optional int32 proID = 1 [default = 10000];
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginReq.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginReq)
  return target;
}

size_t LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginReq)
  size_t total_size = 0;

  // required string name = 2;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // optional int32 proID = 1 [default = 10000];
  if (has_proid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginReq)
    UnsafeMergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoginReq::UnsafeMergeFrom(const LoginReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReq::InternalSwap(LoginReq* other) {
  std::swap(proid_, other->proid_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReq_descriptor_;
  metadata.reflection = LoginReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReq

// optional int32 proID = 1 [default = 10000];
bool LoginReq::has_proid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginReq::set_has_proid() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginReq::clear_has_proid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginReq::clear_proid() {
  proid_ = 10000;
  clear_has_proid();
}
::google::protobuf::int32 LoginReq::proid() const {
  // @@protoc_insertion_point(field_get:LoginReq.proID)
  return proid_;
}
void LoginReq::set_proid(::google::protobuf::int32 value) {
  set_has_proid();
  proid_ = value;
  // @@protoc_insertion_point(field_set:LoginReq.proID)
}

// required string name = 2;
bool LoginReq::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginReq::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& LoginReq::name() const {
  // @@protoc_insertion_point(field_get:LoginReq.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginReq.name)
}
void LoginReq::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginReq.name)
}
void LoginReq::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginReq.name)
}
::std::string* LoginReq::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:LoginReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReq::release_name() {
  // @@protoc_insertion_point(field_release:LoginReq.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:LoginReq.name)
}

inline const LoginReq* LoginReq::internal_default_instance() {
  return &LoginReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAck::kProIDFieldNumber;
const int LoginAck::kRetFieldNumber;
const int LoginAck::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAck::LoginAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginAck)
}

void LoginAck::InitAsDefaultInstance() {
}

LoginAck::LoginAck(const LoginAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginAck)
}

void LoginAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  proid_ = 10001;
  ret_ = 1;
}

LoginAck::~LoginAck() {
  // @@protoc_insertion_point(destructor:LoginAck)
  SharedDtor();
}

void LoginAck::SharedDtor() {
}

void LoginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginAck_descriptor_;
}

const LoginAck& LoginAck::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoginAck> LoginAck_default_instance_;

LoginAck* LoginAck::New(::google::protobuf::Arena* arena) const {
  LoginAck* n = new LoginAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginAck)
  if (_has_bits_[0 / 32] & 7u) {
    proid_ = 10001;
    ret_ = 1;
    id_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proID = 1 [default = 10001];
      case 1: {
        if (tag == 8) {
          set_has_proid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .Result ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Result_IsValid(value)) {
            set_ret(static_cast< ::Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginAck)
  return false;
#undef DO_
}

void LoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginAck)
  // optional int32 proID = 1 [default = 10001];
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proid(), output);
  }

  // required .Result ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  // required int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginAck)
}

::google::protobuf::uint8* LoginAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LoginAck)
  // optional int32 proID = 1 [default = 10001];
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proid(), target);
  }

  // required .Result ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  // required int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginAck)
  return target;
}

size_t LoginAck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LoginAck)
  size_t total_size = 0;

  if (has_ret()) {
    // required .Result ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  if (has_id()) {
    // required int32 id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t LoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginAck)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .Result ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

    // required int32 id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 proID = 1 [default = 10001];
  if (has_proid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginAck)
    UnsafeMergeFrom(*source);
  }
}

void LoginAck::MergeFrom(const LoginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoginAck::UnsafeMergeFrom(const LoginAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LoginAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAck::CopyFrom(const LoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoginAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void LoginAck::Swap(LoginAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAck::InternalSwap(LoginAck* other) {
  std::swap(proid_, other->proid_);
  std::swap(ret_, other->ret_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginAck_descriptor_;
  metadata.reflection = LoginAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginAck

// optional int32 proID = 1 [default = 10001];
bool LoginAck::has_proid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginAck::set_has_proid() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginAck::clear_has_proid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginAck::clear_proid() {
  proid_ = 10001;
  clear_has_proid();
}
::google::protobuf::int32 LoginAck::proid() const {
  // @@protoc_insertion_point(field_get:LoginAck.proID)
  return proid_;
}
void LoginAck::set_proid(::google::protobuf::int32 value) {
  set_has_proid();
  proid_ = value;
  // @@protoc_insertion_point(field_set:LoginAck.proID)
}

// required .Result ret = 2;
bool LoginAck::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginAck::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginAck::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginAck::clear_ret() {
  ret_ = 1;
  clear_has_ret();
}
::Result LoginAck::ret() const {
  // @@protoc_insertion_point(field_get:LoginAck.ret)
  return static_cast< ::Result >(ret_);
}
void LoginAck::set_ret(::Result value) {
  assert(::Result_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:LoginAck.ret)
}

// required int32 id = 3;
bool LoginAck::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginAck::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginAck::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginAck::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 LoginAck::id() const {
  // @@protoc_insertion_point(field_get:LoginAck.id)
  return id_;
}
void LoginAck::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:LoginAck.id)
}

inline const LoginAck* LoginAck::internal_default_instance() {
  return &LoginAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Room::kRoomIDFieldNumber;
const int Room::kCountFieldNumber;
const int Room::kMaxFieldNumber;
const int Room::kRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Room::Room()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Room)
}

void Room::InitAsDefaultInstance() {
}

Room::Room(const Room& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Room)
}

void Room::SharedCtor() {
  _cached_size_ = 0;
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomid_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&roomid_) + sizeof(max_));
}

Room::~Room() {
  // @@protoc_insertion_point(destructor:Room)
  SharedDtor();
}

void Room::SharedDtor() {
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_descriptor_;
}

const Room& Room::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Room> Room_default_instance_;

Room* Room::New(::google::protobuf::Arena* arena) const {
  Room* n = new Room;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:Room)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Room, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Room*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(roomid_, max_);
    if (has_roomname()) {
      roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (tag == 8) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max;
        break;
      }

      // required int32 max = 3;
      case 3: {
        if (tag == 24) {
         parse_max:
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_roomName;
        break;
      }

      // required string roomName = 4;
      case 4: {
        if (tag == 34) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Room.roomName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Room)
  return false;
#undef DO_
}

void Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Room)
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 max = 3;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max(), output);
  }

  // required string roomName = 4;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Room.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->roomname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Room)
}

::google::protobuf::uint8* Room::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Room)
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 max = 3;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max(), target);
  }

  // required string roomName = 4;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Room.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Room)
  return target;
}

size_t Room::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Room)
  size_t total_size = 0;

  if (has_roomid()) {
    // required int32 roomID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  if (has_count()) {
    // required int32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  if (has_max()) {
    // required int32 max = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max());
  }

  if (has_roomname()) {
    // required string roomName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  return total_size;
}
size_t Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Room)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 roomID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

    // required int32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

    // required int32 max = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max());

    // required string roomName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Room)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Room* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Room>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Room)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Room)
    UnsafeMergeFrom(*source);
  }
}

void Room::MergeFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Room)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Room::UnsafeMergeFrom(const Room& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_roomname()) {
      set_has_roomname();
      roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Room::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Room)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Room::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Room::Swap(Room* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Room::InternalSwap(Room* other) {
  std::swap(roomid_, other->roomid_);
  std::swap(count_, other->count_);
  std::swap(max_, other->max_);
  roomname_.Swap(&other->roomname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_descriptor_;
  metadata.reflection = Room_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Room

// required int32 roomID = 1;
bool Room::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Room::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void Room::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Room::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 Room::roomid() const {
  // @@protoc_insertion_point(field_get:Room.roomID)
  return roomid_;
}
void Room::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Room.roomID)
}

// required int32 count = 2;
bool Room::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Room::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void Room::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void Room::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 Room::count() const {
  // @@protoc_insertion_point(field_get:Room.count)
  return count_;
}
void Room::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Room.count)
}

// required int32 max = 3;
bool Room::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Room::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
void Room::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void Room::clear_max() {
  max_ = 0;
  clear_has_max();
}
::google::protobuf::int32 Room::max() const {
  // @@protoc_insertion_point(field_get:Room.max)
  return max_;
}
void Room::set_max(::google::protobuf::int32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:Room.max)
}

// required string roomName = 4;
bool Room::has_roomname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Room::set_has_roomname() {
  _has_bits_[0] |= 0x00000008u;
}
void Room::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000008u;
}
void Room::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomname();
}
const ::std::string& Room::roomname() const {
  // @@protoc_insertion_point(field_get:Room.roomName)
  return roomname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Room::set_roomname(const ::std::string& value) {
  set_has_roomname();
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Room.roomName)
}
void Room::set_roomname(const char* value) {
  set_has_roomname();
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Room.roomName)
}
void Room::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Room.roomName)
}
::std::string* Room::mutable_roomname() {
  set_has_roomname();
  // @@protoc_insertion_point(field_mutable:Room.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Room::release_roomname() {
  // @@protoc_insertion_point(field_release:Room.roomName)
  clear_has_roomname();
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Room::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    set_has_roomname();
  } else {
    clear_has_roomname();
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:Room.roomName)
}

inline const Room* Room::internal_default_instance() {
  return &Room_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRoomReq::kProIDFieldNumber;
const int GetRoomReq::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRoomReq::GetRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetRoomReq)
}

void GetRoomReq::InitAsDefaultInstance() {
}

GetRoomReq::GetRoomReq(const GetRoomReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetRoomReq)
}

void GetRoomReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  proid_ = 10002;
}

GetRoomReq::~GetRoomReq() {
  // @@protoc_insertion_point(destructor:GetRoomReq)
  SharedDtor();
}

void GetRoomReq::SharedDtor() {
}

void GetRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomReq_descriptor_;
}

const GetRoomReq& GetRoomReq::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetRoomReq> GetRoomReq_default_instance_;

GetRoomReq* GetRoomReq::New(::google::protobuf::Arena* arena) const {
  GetRoomReq* n = new GetRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GetRoomReq)
  if (_has_bits_[0 / 32] & 3u) {
    proid_ = 10002;
    userid_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proID = 1 [default = 10002];
      case 1: {
        if (tag == 8) {
          set_has_proid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userID;
        break;
      }

      // required int32 userID = 2;
      case 2: {
        if (tag == 16) {
         parse_userID:
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetRoomReq)
  return false;
#undef DO_
}

void GetRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetRoomReq)
  // optional int32 proID = 1 [default = 10002];
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proid(), output);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetRoomReq)
}

::google::protobuf::uint8* GetRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GetRoomReq)
  // optional int32 proID = 1 [default = 10002];
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proid(), target);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetRoomReq)
  return target;
}

size_t GetRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetRoomReq)
  size_t total_size = 0;

  // required int32 userID = 2;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }
  // optional int32 proID = 1 [default = 10002];
  if (has_proid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetRoomReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetRoomReq)
    UnsafeMergeFrom(*source);
  }
}

void GetRoomReq::MergeFrom(const GetRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetRoomReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetRoomReq::UnsafeMergeFrom(const GetRoomReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GetRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomReq::CopyFrom(const GetRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetRoomReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GetRoomReq::Swap(GetRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRoomReq::InternalSwap(GetRoomReq* other) {
  std::swap(proid_, other->proid_);
  std::swap(userid_, other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomReq_descriptor_;
  metadata.reflection = GetRoomReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRoomReq

// optional int32 proID = 1 [default = 10002];
bool GetRoomReq::has_proid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRoomReq::set_has_proid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRoomReq::clear_has_proid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRoomReq::clear_proid() {
  proid_ = 10002;
  clear_has_proid();
}
::google::protobuf::int32 GetRoomReq::proid() const {
  // @@protoc_insertion_point(field_get:GetRoomReq.proID)
  return proid_;
}
void GetRoomReq::set_proid(::google::protobuf::int32 value) {
  set_has_proid();
  proid_ = value;
  // @@protoc_insertion_point(field_set:GetRoomReq.proID)
}

// required int32 userID = 2;
bool GetRoomReq::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRoomReq::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRoomReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRoomReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
::google::protobuf::int32 GetRoomReq::userid() const {
  // @@protoc_insertion_point(field_get:GetRoomReq.userID)
  return userid_;
}
void GetRoomReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:GetRoomReq.userID)
}

inline const GetRoomReq* GetRoomReq::internal_default_instance() {
  return &GetRoomReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRoomAck::kProIDFieldNumber;
const int GetRoomAck::kRetFieldNumber;
const int GetRoomAck::kRoomsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRoomAck::GetRoomAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetRoomAck)
}

void GetRoomAck::InitAsDefaultInstance() {
}

GetRoomAck::GetRoomAck(const GetRoomAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetRoomAck)
}

void GetRoomAck::SharedCtor() {
  _cached_size_ = 0;
  proid_ = 10003;
  ret_ = 1;
}

GetRoomAck::~GetRoomAck() {
  // @@protoc_insertion_point(destructor:GetRoomAck)
  SharedDtor();
}

void GetRoomAck::SharedDtor() {
}

void GetRoomAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomAck_descriptor_;
}

const GetRoomAck& GetRoomAck::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetRoomAck> GetRoomAck_default_instance_;

GetRoomAck* GetRoomAck::New(::google::protobuf::Arena* arena) const {
  GetRoomAck* n = new GetRoomAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:GetRoomAck)
  if (_has_bits_[0 / 32] & 3u) {
    proid_ = 10003;
    ret_ = 1;
  }
  rooms_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetRoomAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proID = 1 [default = 10003];
      case 1: {
        if (tag == 8) {
          set_has_proid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .Result ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Result_IsValid(value)) {
            set_ret(static_cast< ::Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rooms;
        break;
      }

      // repeated .Room rooms = 3;
      case 3: {
        if (tag == 26) {
         parse_rooms:
          DO_(input->IncrementRecursionDepth());
         parse_loop_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rooms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_rooms;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetRoomAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetRoomAck)
  return false;
#undef DO_
}

void GetRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetRoomAck)
  // optional int32 proID = 1 [default = 10003];
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proid(), output);
  }

  // required .Result ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  // repeated .Room rooms = 3;
  for (unsigned int i = 0, n = this->rooms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rooms(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetRoomAck)
}

::google::protobuf::uint8* GetRoomAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GetRoomAck)
  // optional int32 proID = 1 [default = 10003];
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proid(), target);
  }

  // required .Result ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  // repeated .Room rooms = 3;
  for (unsigned int i = 0, n = this->rooms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->rooms(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetRoomAck)
  return target;
}

size_t GetRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetRoomAck)
  size_t total_size = 0;

  // required .Result ret = 2;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }
  // optional int32 proID = 1 [default = 10003];
  if (has_proid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proid());
  }

  // repeated .Room rooms = 3;
  {
    unsigned int count = this->rooms_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rooms(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetRoomAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetRoomAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRoomAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetRoomAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetRoomAck)
    UnsafeMergeFrom(*source);
  }
}

void GetRoomAck::MergeFrom(const GetRoomAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetRoomAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetRoomAck::UnsafeMergeFrom(const GetRoomAck& from) {
  GOOGLE_DCHECK(&from != this);
  rooms_.MergeFrom(from.rooms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GetRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomAck::CopyFrom(const GetRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetRoomAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetRoomAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rooms())) return false;
  return true;
}

void GetRoomAck::Swap(GetRoomAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRoomAck::InternalSwap(GetRoomAck* other) {
  std::swap(proid_, other->proid_);
  std::swap(ret_, other->ret_);
  rooms_.UnsafeArenaSwap(&other->rooms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRoomAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomAck_descriptor_;
  metadata.reflection = GetRoomAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRoomAck

// optional int32 proID = 1 [default = 10003];
bool GetRoomAck::has_proid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRoomAck::set_has_proid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRoomAck::clear_has_proid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRoomAck::clear_proid() {
  proid_ = 10003;
  clear_has_proid();
}
::google::protobuf::int32 GetRoomAck::proid() const {
  // @@protoc_insertion_point(field_get:GetRoomAck.proID)
  return proid_;
}
void GetRoomAck::set_proid(::google::protobuf::int32 value) {
  set_has_proid();
  proid_ = value;
  // @@protoc_insertion_point(field_set:GetRoomAck.proID)
}

// required .Result ret = 2;
bool GetRoomAck::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRoomAck::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRoomAck::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRoomAck::clear_ret() {
  ret_ = 1;
  clear_has_ret();
}
::Result GetRoomAck::ret() const {
  // @@protoc_insertion_point(field_get:GetRoomAck.ret)
  return static_cast< ::Result >(ret_);
}
void GetRoomAck::set_ret(::Result value) {
  assert(::Result_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:GetRoomAck.ret)
}

// repeated .Room rooms = 3;
int GetRoomAck::rooms_size() const {
  return rooms_.size();
}
void GetRoomAck::clear_rooms() {
  rooms_.Clear();
}
const ::Room& GetRoomAck::rooms(int index) const {
  // @@protoc_insertion_point(field_get:GetRoomAck.rooms)
  return rooms_.Get(index);
}
::Room* GetRoomAck::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:GetRoomAck.rooms)
  return rooms_.Mutable(index);
}
::Room* GetRoomAck::add_rooms() {
  // @@protoc_insertion_point(field_add:GetRoomAck.rooms)
  return rooms_.Add();
}
::google::protobuf::RepeatedPtrField< ::Room >*
GetRoomAck::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:GetRoomAck.rooms)
  return &rooms_;
}
const ::google::protobuf::RepeatedPtrField< ::Room >&
GetRoomAck::rooms() const {
  // @@protoc_insertion_point(field_list:GetRoomAck.rooms)
  return rooms_;
}

inline const GetRoomAck* GetRoomAck::internal_default_instance() {
  return &GetRoomAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterRoomReq::kProIDFieldNumber;
const int EnterRoomReq::kUserIDFieldNumber;
const int EnterRoomReq::kRoomIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterRoomReq::EnterRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnterRoomReq)
}

void EnterRoomReq::InitAsDefaultInstance() {
}

EnterRoomReq::EnterRoomReq(const EnterRoomReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EnterRoomReq)
}

void EnterRoomReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&userid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
  proid_ = 10004;
}

EnterRoomReq::~EnterRoomReq() {
  // @@protoc_insertion_point(destructor:EnterRoomReq)
  SharedDtor();
}

void EnterRoomReq::SharedDtor() {
}

void EnterRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoomReq_descriptor_;
}

const EnterRoomReq& EnterRoomReq::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EnterRoomReq> EnterRoomReq_default_instance_;

EnterRoomReq* EnterRoomReq::New(::google::protobuf::Arena* arena) const {
  EnterRoomReq* n = new EnterRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:EnterRoomReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EnterRoomReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnterRoomReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(userid_, roomid_);
    proid_ = 10004;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EnterRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnterRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proID = 1 [default = 10004];
      case 1: {
        if (tag == 8) {
          set_has_proid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userID;
        break;
      }

      // required int32 userID = 2;
      case 2: {
        if (tag == 16) {
         parse_userID:
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomID;
        break;
      }

      // required int32 roomID = 3;
      case 3: {
        if (tag == 24) {
         parse_roomID:
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnterRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnterRoomReq)
  return false;
#undef DO_
}

void EnterRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnterRoomReq)
  // optional int32 proID = 1 [default = 10004];
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proid(), output);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // required int32 roomID = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnterRoomReq)
}

::google::protobuf::uint8* EnterRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EnterRoomReq)
  // optional int32 proID = 1 [default = 10004];
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proid(), target);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // required int32 roomID = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterRoomReq)
  return target;
}

size_t EnterRoomReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EnterRoomReq)
  size_t total_size = 0;

  if (has_userid()) {
    // required int32 userID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  if (has_roomid()) {
    // required int32 roomID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t EnterRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnterRoomReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 userID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());

    // required int32 roomID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 proID = 1 [default = 10004];
  if (has_proid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnterRoomReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EnterRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnterRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnterRoomReq)
    UnsafeMergeFrom(*source);
  }
}

void EnterRoomReq::MergeFrom(const EnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnterRoomReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EnterRoomReq::UnsafeMergeFrom(const EnterRoomReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EnterRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomReq::CopyFrom(const EnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnterRoomReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EnterRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void EnterRoomReq::Swap(EnterRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterRoomReq::InternalSwap(EnterRoomReq* other) {
  std::swap(proid_, other->proid_);
  std::swap(userid_, other->userid_);
  std::swap(roomid_, other->roomid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoomReq_descriptor_;
  metadata.reflection = EnterRoomReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterRoomReq

// optional int32 proID = 1 [default = 10004];
bool EnterRoomReq::has_proid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnterRoomReq::set_has_proid() {
  _has_bits_[0] |= 0x00000001u;
}
void EnterRoomReq::clear_has_proid() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnterRoomReq::clear_proid() {
  proid_ = 10004;
  clear_has_proid();
}
::google::protobuf::int32 EnterRoomReq::proid() const {
  // @@protoc_insertion_point(field_get:EnterRoomReq.proID)
  return proid_;
}
void EnterRoomReq::set_proid(::google::protobuf::int32 value) {
  set_has_proid();
  proid_ = value;
  // @@protoc_insertion_point(field_set:EnterRoomReq.proID)
}

// required int32 userID = 2;
bool EnterRoomReq::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnterRoomReq::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void EnterRoomReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnterRoomReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
::google::protobuf::int32 EnterRoomReq::userid() const {
  // @@protoc_insertion_point(field_get:EnterRoomReq.userID)
  return userid_;
}
void EnterRoomReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:EnterRoomReq.userID)
}

// required int32 roomID = 3;
bool EnterRoomReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EnterRoomReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void EnterRoomReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void EnterRoomReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 EnterRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:EnterRoomReq.roomID)
  return roomid_;
}
void EnterRoomReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:EnterRoomReq.roomID)
}

inline const EnterRoomReq* EnterRoomReq::internal_default_instance() {
  return &EnterRoomReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterRoomAck::kProIDFieldNumber;
const int EnterRoomAck::kRetFieldNumber;
const int EnterRoomAck::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterRoomAck::EnterRoomAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnterRoomAck)
}

void EnterRoomAck::InitAsDefaultInstance() {
}

EnterRoomAck::EnterRoomAck(const EnterRoomAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EnterRoomAck)
}

void EnterRoomAck::SharedCtor() {
  _cached_size_ = 0;
  proid_ = 10005;
  ret_ = 1;
}

EnterRoomAck::~EnterRoomAck() {
  // @@protoc_insertion_point(destructor:EnterRoomAck)
  SharedDtor();
}

void EnterRoomAck::SharedDtor() {
}

void EnterRoomAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoomAck_descriptor_;
}

const EnterRoomAck& EnterRoomAck::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EnterRoomAck> EnterRoomAck_default_instance_;

EnterRoomAck* EnterRoomAck::New(::google::protobuf::Arena* arena) const {
  EnterRoomAck* n = new EnterRoomAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:EnterRoomAck)
  if (_has_bits_[0 / 32] & 3u) {
    proid_ = 10005;
    ret_ = 1;
  }
  users_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EnterRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnterRoomAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proID = 1 [default = 10005];
      case 1: {
        if (tag == 8) {
          set_has_proid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .Result ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Result_IsValid(value)) {
            set_ret(static_cast< ::Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_users;
        break;
      }

      // repeated .RoomUser users = 3;
      case 3: {
        if (tag == 26) {
         parse_users:
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnterRoomAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnterRoomAck)
  return false;
#undef DO_
}

void EnterRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnterRoomAck)
  // optional int32 proID = 1 [default = 10005];
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proid(), output);
  }

  // required .Result ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  // repeated .RoomUser users = 3;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->users(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnterRoomAck)
}

::google::protobuf::uint8* EnterRoomAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EnterRoomAck)
  // optional int32 proID = 1 [default = 10005];
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proid(), target);
  }

  // required .Result ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  // repeated .RoomUser users = 3;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->users(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterRoomAck)
  return target;
}

size_t EnterRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnterRoomAck)
  size_t total_size = 0;

  // required .Result ret = 2;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }
  // optional int32 proID = 1 [default = 10005];
  if (has_proid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proid());
  }

  // repeated .RoomUser users = 3;
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnterRoomAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EnterRoomAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterRoomAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnterRoomAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnterRoomAck)
    UnsafeMergeFrom(*source);
  }
}

void EnterRoomAck::MergeFrom(const EnterRoomAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnterRoomAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EnterRoomAck::UnsafeMergeFrom(const EnterRoomAck& from) {
  GOOGLE_DCHECK(&from != this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EnterRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnterRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomAck::CopyFrom(const EnterRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnterRoomAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EnterRoomAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void EnterRoomAck::Swap(EnterRoomAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterRoomAck::InternalSwap(EnterRoomAck* other) {
  std::swap(proid_, other->proid_);
  std::swap(ret_, other->ret_);
  users_.UnsafeArenaSwap(&other->users_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterRoomAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoomAck_descriptor_;
  metadata.reflection = EnterRoomAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterRoomAck

// optional int32 proID = 1 [default = 10005];
bool EnterRoomAck::has_proid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnterRoomAck::set_has_proid() {
  _has_bits_[0] |= 0x00000001u;
}
void EnterRoomAck::clear_has_proid() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnterRoomAck::clear_proid() {
  proid_ = 10005;
  clear_has_proid();
}
::google::protobuf::int32 EnterRoomAck::proid() const {
  // @@protoc_insertion_point(field_get:EnterRoomAck.proID)
  return proid_;
}
void EnterRoomAck::set_proid(::google::protobuf::int32 value) {
  set_has_proid();
  proid_ = value;
  // @@protoc_insertion_point(field_set:EnterRoomAck.proID)
}

// required .Result ret = 2;
bool EnterRoomAck::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnterRoomAck::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void EnterRoomAck::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnterRoomAck::clear_ret() {
  ret_ = 1;
  clear_has_ret();
}
::Result EnterRoomAck::ret() const {
  // @@protoc_insertion_point(field_get:EnterRoomAck.ret)
  return static_cast< ::Result >(ret_);
}
void EnterRoomAck::set_ret(::Result value) {
  assert(::Result_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:EnterRoomAck.ret)
}

// repeated .RoomUser users = 3;
int EnterRoomAck::users_size() const {
  return users_.size();
}
void EnterRoomAck::clear_users() {
  users_.Clear();
}
const ::RoomUser& EnterRoomAck::users(int index) const {
  // @@protoc_insertion_point(field_get:EnterRoomAck.users)
  return users_.Get(index);
}
::RoomUser* EnterRoomAck::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:EnterRoomAck.users)
  return users_.Mutable(index);
}
::RoomUser* EnterRoomAck::add_users() {
  // @@protoc_insertion_point(field_add:EnterRoomAck.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::RoomUser >*
EnterRoomAck::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:EnterRoomAck.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::RoomUser >&
EnterRoomAck::users() const {
  // @@protoc_insertion_point(field_list:EnterRoomAck.users)
  return users_;
}

inline const EnterRoomAck* EnterRoomAck::internal_default_instance() {
  return &EnterRoomAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareGameReq::kProIDFieldNumber;
const int PrepareGameReq::kUserIDFieldNumber;
const int PrepareGameReq::kRoomIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareGameReq::PrepareGameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrepareGameReq)
}

void PrepareGameReq::InitAsDefaultInstance() {
}

PrepareGameReq::PrepareGameReq(const PrepareGameReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrepareGameReq)
}

void PrepareGameReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&userid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
  proid_ = 10006;
}

PrepareGameReq::~PrepareGameReq() {
  // @@protoc_insertion_point(destructor:PrepareGameReq)
  SharedDtor();
}

void PrepareGameReq::SharedDtor() {
}

void PrepareGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareGameReq_descriptor_;
}

const PrepareGameReq& PrepareGameReq::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PrepareGameReq> PrepareGameReq_default_instance_;

PrepareGameReq* PrepareGameReq::New(::google::protobuf::Arena* arena) const {
  PrepareGameReq* n = new PrepareGameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareGameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PrepareGameReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PrepareGameReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PrepareGameReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(userid_, roomid_);
    proid_ = 10006;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PrepareGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrepareGameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proID = 1 [default = 10006];
      case 1: {
        if (tag == 8) {
          set_has_proid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userID;
        break;
      }

      // required int32 userID = 2;
      case 2: {
        if (tag == 16) {
         parse_userID:
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomID;
        break;
      }

      // required int32 roomID = 3;
      case 3: {
        if (tag == 24) {
         parse_roomID:
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrepareGameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrepareGameReq)
  return false;
#undef DO_
}

void PrepareGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrepareGameReq)
  // optional int32 proID = 1 [default = 10006];
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proid(), output);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // required int32 roomID = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrepareGameReq)
}

::google::protobuf::uint8* PrepareGameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PrepareGameReq)
  // optional int32 proID = 1 [default = 10006];
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proid(), target);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // required int32 roomID = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrepareGameReq)
  return target;
}

size_t PrepareGameReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PrepareGameReq)
  size_t total_size = 0;

  if (has_userid()) {
    // required int32 userID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  if (has_roomid()) {
    // required int32 roomID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  return total_size;
}
size_t PrepareGameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrepareGameReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 userID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());

    // required int32 roomID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 proID = 1 [default = 10006];
  if (has_proid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareGameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PrepareGameReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrepareGameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareGameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PrepareGameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PrepareGameReq)
    UnsafeMergeFrom(*source);
  }
}

void PrepareGameReq::MergeFrom(const PrepareGameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrepareGameReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PrepareGameReq::UnsafeMergeFrom(const PrepareGameReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PrepareGameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PrepareGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareGameReq::CopyFrom(const PrepareGameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrepareGameReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PrepareGameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void PrepareGameReq::Swap(PrepareGameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareGameReq::InternalSwap(PrepareGameReq* other) {
  std::swap(proid_, other->proid_);
  std::swap(userid_, other->userid_);
  std::swap(roomid_, other->roomid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareGameReq_descriptor_;
  metadata.reflection = PrepareGameReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareGameReq

// optional int32 proID = 1 [default = 10006];
bool PrepareGameReq::has_proid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PrepareGameReq::set_has_proid() {
  _has_bits_[0] |= 0x00000001u;
}
void PrepareGameReq::clear_has_proid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PrepareGameReq::clear_proid() {
  proid_ = 10006;
  clear_has_proid();
}
::google::protobuf::int32 PrepareGameReq::proid() const {
  // @@protoc_insertion_point(field_get:PrepareGameReq.proID)
  return proid_;
}
void PrepareGameReq::set_proid(::google::protobuf::int32 value) {
  set_has_proid();
  proid_ = value;
  // @@protoc_insertion_point(field_set:PrepareGameReq.proID)
}

// required int32 userID = 2;
bool PrepareGameReq::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PrepareGameReq::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void PrepareGameReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PrepareGameReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
::google::protobuf::int32 PrepareGameReq::userid() const {
  // @@protoc_insertion_point(field_get:PrepareGameReq.userID)
  return userid_;
}
void PrepareGameReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:PrepareGameReq.userID)
}

// required int32 roomID = 3;
bool PrepareGameReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PrepareGameReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void PrepareGameReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void PrepareGameReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
::google::protobuf::int32 PrepareGameReq::roomid() const {
  // @@protoc_insertion_point(field_get:PrepareGameReq.roomID)
  return roomid_;
}
void PrepareGameReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:PrepareGameReq.roomID)
}

inline const PrepareGameReq* PrepareGameReq::internal_default_instance() {
  return &PrepareGameReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareGameAck::kProIDFieldNumber;
const int PrepareGameAck::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareGameAck::PrepareGameAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrepareGameAck)
}

void PrepareGameAck::InitAsDefaultInstance() {
}

PrepareGameAck::PrepareGameAck(const PrepareGameAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrepareGameAck)
}

void PrepareGameAck::SharedCtor() {
  _cached_size_ = 0;
  proid_ = 10007;
  ret_ = 1;
}

PrepareGameAck::~PrepareGameAck() {
  // @@protoc_insertion_point(destructor:PrepareGameAck)
  SharedDtor();
}

void PrepareGameAck::SharedDtor() {
}

void PrepareGameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareGameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareGameAck_descriptor_;
}

const PrepareGameAck& PrepareGameAck::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PrepareGameAck> PrepareGameAck_default_instance_;

PrepareGameAck* PrepareGameAck::New(::google::protobuf::Arena* arena) const {
  PrepareGameAck* n = new PrepareGameAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareGameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:PrepareGameAck)
  if (_has_bits_[0 / 32] & 3u) {
    proid_ = 10007;
    ret_ = 1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PrepareGameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrepareGameAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proID = 1 [default = 10007];
      case 1: {
        if (tag == 8) {
          set_has_proid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .Result ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Result_IsValid(value)) {
            set_ret(static_cast< ::Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrepareGameAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrepareGameAck)
  return false;
#undef DO_
}

void PrepareGameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrepareGameAck)
  // optional int32 proID = 1 [default = 10007];
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proid(), output);
  }

  // required .Result ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrepareGameAck)
}

::google::protobuf::uint8* PrepareGameAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PrepareGameAck)
  // optional int32 proID = 1 [default = 10007];
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proid(), target);
  }

  // required .Result ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrepareGameAck)
  return target;
}

size_t PrepareGameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrepareGameAck)
  size_t total_size = 0;

  // required .Result ret = 2;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }
  // optional int32 proID = 1 [default = 10007];
  if (has_proid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareGameAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PrepareGameAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrepareGameAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareGameAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PrepareGameAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PrepareGameAck)
    UnsafeMergeFrom(*source);
  }
}

void PrepareGameAck::MergeFrom(const PrepareGameAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrepareGameAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PrepareGameAck::UnsafeMergeFrom(const PrepareGameAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PrepareGameAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PrepareGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareGameAck::CopyFrom(const PrepareGameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrepareGameAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PrepareGameAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void PrepareGameAck::Swap(PrepareGameAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareGameAck::InternalSwap(PrepareGameAck* other) {
  std::swap(proid_, other->proid_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareGameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareGameAck_descriptor_;
  metadata.reflection = PrepareGameAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareGameAck

// optional int32 proID = 1 [default = 10007];
bool PrepareGameAck::has_proid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PrepareGameAck::set_has_proid() {
  _has_bits_[0] |= 0x00000001u;
}
void PrepareGameAck::clear_has_proid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PrepareGameAck::clear_proid() {
  proid_ = 10007;
  clear_has_proid();
}
::google::protobuf::int32 PrepareGameAck::proid() const {
  // @@protoc_insertion_point(field_get:PrepareGameAck.proID)
  return proid_;
}
void PrepareGameAck::set_proid(::google::protobuf::int32 value) {
  set_has_proid();
  proid_ = value;
  // @@protoc_insertion_point(field_set:PrepareGameAck.proID)
}

// required .Result ret = 2;
bool PrepareGameAck::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PrepareGameAck::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void PrepareGameAck::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void PrepareGameAck::clear_ret() {
  ret_ = 1;
  clear_has_ret();
}
::Result PrepareGameAck::ret() const {
  // @@protoc_insertion_point(field_get:PrepareGameAck.ret)
  return static_cast< ::Result >(ret_);
}
void PrepareGameAck::set_ret(::Result value) {
  assert(::Result_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:PrepareGameAck.ret)
}

inline const PrepareGameAck* PrepareGameAck::internal_default_instance() {
  return &PrepareGameAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessReq::kProIDFieldNumber;
const int ChessReq::kUserIDFieldNumber;
const int ChessReq::kXFieldNumber;
const int ChessReq::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessReq::ChessReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChessReq)
}

void ChessReq::InitAsDefaultInstance() {
}

ChessReq::ChessReq(const ChessReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChessReq)
}

void ChessReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&userid_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&userid_) + sizeof(y_));
  proid_ = 10008;
}

ChessReq::~ChessReq() {
  // @@protoc_insertion_point(destructor:ChessReq)
  SharedDtor();
}

void ChessReq::SharedDtor() {
}

void ChessReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessReq_descriptor_;
}

const ChessReq& ChessReq::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChessReq> ChessReq_default_instance_;

ChessReq* ChessReq::New(::google::protobuf::Arena* arena) const {
  ChessReq* n = new ChessReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ChessReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChessReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChessReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(userid_, y_);
    proid_ = 10008;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChessReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChessReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proID = 1 [default = 10008];
      case 1: {
        if (tag == 8) {
          set_has_proid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userID;
        break;
      }

      // required int32 userID = 2;
      case 2: {
        if (tag == 16) {
         parse_userID:
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // required int32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // required int32 y = 4;
      case 4: {
        if (tag == 32) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChessReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChessReq)
  return false;
#undef DO_
}

void ChessReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChessReq)
  // optional int32 proID = 1 [default = 10008];
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proid(), output);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // required int32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // required int32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChessReq)
}

::google::protobuf::uint8* ChessReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChessReq)
  // optional int32 proID = 1 [default = 10008];
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proid(), target);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // required int32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // required int32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChessReq)
  return target;
}

size_t ChessReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChessReq)
  size_t total_size = 0;

  if (has_userid()) {
    // required int32 userID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  if (has_x()) {
    // required int32 x = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
size_t ChessReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChessReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required int32 userID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());

    // required int32 x = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 proID = 1 [default = 10008];
  if (has_proid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChessReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChessReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChessReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChessReq)
    UnsafeMergeFrom(*source);
  }
}

void ChessReq::MergeFrom(const ChessReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChessReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChessReq::UnsafeMergeFrom(const ChessReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ChessReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChessReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessReq::CopyFrom(const ChessReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChessReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChessReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void ChessReq::Swap(ChessReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessReq::InternalSwap(ChessReq* other) {
  std::swap(proid_, other->proid_);
  std::swap(userid_, other->userid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessReq_descriptor_;
  metadata.reflection = ChessReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessReq

// optional int32 proID = 1 [default = 10008];
bool ChessReq::has_proid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChessReq::set_has_proid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChessReq::clear_has_proid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChessReq::clear_proid() {
  proid_ = 10008;
  clear_has_proid();
}
::google::protobuf::int32 ChessReq::proid() const {
  // @@protoc_insertion_point(field_get:ChessReq.proID)
  return proid_;
}
void ChessReq::set_proid(::google::protobuf::int32 value) {
  set_has_proid();
  proid_ = value;
  // @@protoc_insertion_point(field_set:ChessReq.proID)
}

// required int32 userID = 2;
bool ChessReq::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChessReq::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void ChessReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChessReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
::google::protobuf::int32 ChessReq::userid() const {
  // @@protoc_insertion_point(field_get:ChessReq.userID)
  return userid_;
}
void ChessReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:ChessReq.userID)
}

// required int32 x = 3;
bool ChessReq::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChessReq::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void ChessReq::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChessReq::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 ChessReq::x() const {
  // @@protoc_insertion_point(field_get:ChessReq.x)
  return x_;
}
void ChessReq::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ChessReq.x)
}

// required int32 y = 4;
bool ChessReq::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChessReq::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void ChessReq::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChessReq::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 ChessReq::y() const {
  // @@protoc_insertion_point(field_get:ChessReq.y)
  return y_;
}
void ChessReq::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ChessReq.y)
}

inline const ChessReq* ChessReq::internal_default_instance() {
  return &ChessReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessAck::kProIDFieldNumber;
const int ChessAck::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessAck::ChessAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChessAck)
}

void ChessAck::InitAsDefaultInstance() {
}

ChessAck::ChessAck(const ChessAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChessAck)
}

void ChessAck::SharedCtor() {
  _cached_size_ = 0;
  proid_ = 10009;
  ret_ = 1;
}

ChessAck::~ChessAck() {
  // @@protoc_insertion_point(destructor:ChessAck)
  SharedDtor();
}

void ChessAck::SharedDtor() {
}

void ChessAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessAck_descriptor_;
}

const ChessAck& ChessAck::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChessAck> ChessAck_default_instance_;

ChessAck* ChessAck::New(::google::protobuf::Arena* arena) const {
  ChessAck* n = new ChessAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ChessAck)
  if (_has_bits_[0 / 32] & 3u) {
    proid_ = 10009;
    ret_ = 1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChessAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChessAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proID = 1 [default = 10009];
      case 1: {
        if (tag == 8) {
          set_has_proid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .Result ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Result_IsValid(value)) {
            set_ret(static_cast< ::Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChessAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChessAck)
  return false;
#undef DO_
}

void ChessAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChessAck)
  // optional int32 proID = 1 [default = 10009];
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proid(), output);
  }

  // required .Result ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChessAck)
}

::google::protobuf::uint8* ChessAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChessAck)
  // optional int32 proID = 1 [default = 10009];
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proid(), target);
  }

  // required .Result ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChessAck)
  return target;
}

size_t ChessAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChessAck)
  size_t total_size = 0;

  // required .Result ret = 2;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }
  // optional int32 proID = 1 [default = 10009];
  if (has_proid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChessAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChessAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChessAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChessAck)
    UnsafeMergeFrom(*source);
  }
}

void ChessAck::MergeFrom(const ChessAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChessAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChessAck::UnsafeMergeFrom(const ChessAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ChessAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChessAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessAck::CopyFrom(const ChessAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChessAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChessAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ChessAck::Swap(ChessAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessAck::InternalSwap(ChessAck* other) {
  std::swap(proid_, other->proid_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessAck_descriptor_;
  metadata.reflection = ChessAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChessAck

// optional int32 proID = 1 [default = 10009];
bool ChessAck::has_proid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChessAck::set_has_proid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChessAck::clear_has_proid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChessAck::clear_proid() {
  proid_ = 10009;
  clear_has_proid();
}
::google::protobuf::int32 ChessAck::proid() const {
  // @@protoc_insertion_point(field_get:ChessAck.proID)
  return proid_;
}
void ChessAck::set_proid(::google::protobuf::int32 value) {
  set_has_proid();
  proid_ = value;
  // @@protoc_insertion_point(field_set:ChessAck.proID)
}

// required .Result ret = 2;
bool ChessAck::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChessAck::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void ChessAck::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChessAck::clear_ret() {
  ret_ = 1;
  clear_has_ret();
}
::Result ChessAck::ret() const {
  // @@protoc_insertion_point(field_get:ChessAck.ret)
  return static_cast< ::Result >(ret_);
}
void ChessAck::set_ret(::Result value) {
  assert(::Result_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:ChessAck.ret)
}

inline const ChessAck* ChessAck::internal_default_instance() {
  return &ChessAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStartAck::kProIDFieldNumber;
const int GameStartAck::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStartAck::GameStartAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameStartAck)
}

void GameStartAck::InitAsDefaultInstance() {
}

GameStartAck::GameStartAck(const GameStartAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameStartAck)
}

void GameStartAck::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  proid_ = 10010;
}

GameStartAck::~GameStartAck() {
  // @@protoc_insertion_point(destructor:GameStartAck)
  SharedDtor();
}

void GameStartAck::SharedDtor() {
}

void GameStartAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStartAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStartAck_descriptor_;
}

const GameStartAck& GameStartAck::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameStartAck> GameStartAck_default_instance_;

GameStartAck* GameStartAck::New(::google::protobuf::Arena* arena) const {
  GameStartAck* n = new GameStartAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameStartAck::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartAck)
  if (_has_bits_[0 / 32] & 3u) {
    proid_ = 10010;
    userid_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameStartAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameStartAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proID = 1 [default = 10010];
      case 1: {
        if (tag == 8) {
          set_has_proid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userID;
        break;
      }

      // required int32 userID = 2;
      case 2: {
        if (tag == 16) {
         parse_userID:
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameStartAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameStartAck)
  return false;
#undef DO_
}

void GameStartAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameStartAck)
  // optional int32 proID = 1 [default = 10010];
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proid(), output);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameStartAck)
}

::google::protobuf::uint8* GameStartAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameStartAck)
  // optional int32 proID = 1 [default = 10010];
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proid(), target);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStartAck)
  return target;
}

size_t GameStartAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartAck)
  size_t total_size = 0;

  // required int32 userID = 2;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }
  // optional int32 proID = 1 [default = 10010];
  if (has_proid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameStartAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameStartAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameStartAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameStartAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameStartAck)
    UnsafeMergeFrom(*source);
  }
}

void GameStartAck::MergeFrom(const GameStartAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameStartAck::UnsafeMergeFrom(const GameStartAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GameStartAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameStartAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartAck::CopyFrom(const GameStartAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameStartAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GameStartAck::Swap(GameStartAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStartAck::InternalSwap(GameStartAck* other) {
  std::swap(proid_, other->proid_);
  std::swap(userid_, other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameStartAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStartAck_descriptor_;
  metadata.reflection = GameStartAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameStartAck

// optional int32 proID = 1 [default = 10010];
bool GameStartAck::has_proid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameStartAck::set_has_proid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameStartAck::clear_has_proid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameStartAck::clear_proid() {
  proid_ = 10010;
  clear_has_proid();
}
::google::protobuf::int32 GameStartAck::proid() const {
  // @@protoc_insertion_point(field_get:GameStartAck.proID)
  return proid_;
}
void GameStartAck::set_proid(::google::protobuf::int32 value) {
  set_has_proid();
  proid_ = value;
  // @@protoc_insertion_point(field_set:GameStartAck.proID)
}

// required int32 userID = 2;
bool GameStartAck::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameStartAck::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameStartAck::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameStartAck::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
::google::protobuf::int32 GameStartAck::userid() const {
  // @@protoc_insertion_point(field_get:GameStartAck.userID)
  return userid_;
}
void GameStartAck::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:GameStartAck.userID)
}

inline const GameStartAck* GameStartAck::internal_default_instance() {
  return &GameStartAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameOverAck::kProIDFieldNumber;
const int GameOverAck::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameOverAck::GameOverAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameOverAck)
}

void GameOverAck::InitAsDefaultInstance() {
}

GameOverAck::GameOverAck(const GameOverAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameOverAck)
}

void GameOverAck::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  proid_ = 10011;
}

GameOverAck::~GameOverAck() {
  // @@protoc_insertion_point(destructor:GameOverAck)
  SharedDtor();
}

void GameOverAck::SharedDtor() {
}

void GameOverAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOverAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOverAck_descriptor_;
}

const GameOverAck& GameOverAck::default_instance() {
  protobuf_InitDefaults_zhaqijie_2fqi_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameOverAck> GameOverAck_default_instance_;

GameOverAck* GameOverAck::New(::google::protobuf::Arena* arena) const {
  GameOverAck* n = new GameOverAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameOverAck::Clear() {
// @@protoc_insertion_point(message_clear_start:GameOverAck)
  if (_has_bits_[0 / 32] & 3u) {
    proid_ = 10011;
    userid_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameOverAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameOverAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 proID = 1 [default = 10011];
      case 1: {
        if (tag == 8) {
          set_has_proid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userID;
        break;
      }

      // required int32 userID = 2;
      case 2: {
        if (tag == 16) {
         parse_userID:
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameOverAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameOverAck)
  return false;
#undef DO_
}

void GameOverAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameOverAck)
  // optional int32 proID = 1 [default = 10011];
  if (has_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proid(), output);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameOverAck)
}

::google::protobuf::uint8* GameOverAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameOverAck)
  // optional int32 proID = 1 [default = 10011];
  if (has_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proid(), target);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameOverAck)
  return target;
}

size_t GameOverAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameOverAck)
  size_t total_size = 0;

  // required int32 userID = 2;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }
  // optional int32 proID = 1 [default = 10011];
  if (has_proid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOverAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameOverAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameOverAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameOverAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameOverAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameOverAck)
    UnsafeMergeFrom(*source);
  }
}

void GameOverAck::MergeFrom(const GameOverAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameOverAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameOverAck::UnsafeMergeFrom(const GameOverAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proid()) {
      set_proid(from.proid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GameOverAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameOverAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOverAck::CopyFrom(const GameOverAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameOverAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameOverAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GameOverAck::Swap(GameOverAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameOverAck::InternalSwap(GameOverAck* other) {
  std::swap(proid_, other->proid_);
  std::swap(userid_, other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameOverAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOverAck_descriptor_;
  metadata.reflection = GameOverAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameOverAck

// optional int32 proID = 1 [default = 10011];
bool GameOverAck::has_proid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameOverAck::set_has_proid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameOverAck::clear_has_proid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameOverAck::clear_proid() {
  proid_ = 10011;
  clear_has_proid();
}
::google::protobuf::int32 GameOverAck::proid() const {
  // @@protoc_insertion_point(field_get:GameOverAck.proID)
  return proid_;
}
void GameOverAck::set_proid(::google::protobuf::int32 value) {
  set_has_proid();
  proid_ = value;
  // @@protoc_insertion_point(field_set:GameOverAck.proID)
}

// required int32 userID = 2;
bool GameOverAck::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameOverAck::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void GameOverAck::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameOverAck::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
::google::protobuf::int32 GameOverAck::userid() const {
  // @@protoc_insertion_point(field_get:GameOverAck.userID)
  return userid_;
}
void GameOverAck::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:GameOverAck.userID)
}

inline const GameOverAck* GameOverAck::internal_default_instance() {
  return &GameOverAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
